{"version":3,"sources":["../../../src/datetime-mask/datetime-mask.component.ts"],"names":[],"mappings":"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","file":"datetime-mask.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit, DoCheck } from '@angular/core';\r\nimport { Field } from 'ng-formly';\r\nimport createAutoCorrectedDateTimePipe from './createAutoCorrectedDateTimePipe';\r\nimport * as moment from 'moment';\r\nimport { Validators, FormControl } from '@angular/forms';\r\n\r\n\r\nexport class FormlyDateTimeMaskComponent extends Field implements OnInit {\r\n    model: any;\r\n    format: string = 'DD-MM-YYYY HH:mm';\r\n    autoCorrectedDatePipe: any;\r\n    mask = [/\\d/, /\\d/, '-', /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, ':', /\\d/, /\\d/];\r\n    errors: string;\r\n\r\n    ngOnInit() {\r\n        this.format = this.to.format ? this.to.format : this.format;\r\n        this.autoCorrectedDatePipe = createAutoCorrectedDateTimePipe(this.format);\r\n        this.mask = this.to.mask ? this.to.mask : this.mask;\r\n        if (this.formControl.value) {\r\n            this.model = moment(this.formControl.value).format(this.format);\r\n        }\r\n        else {\r\n            this.model = null;\r\n        }\r\n        let validators = [];\r\n        validators.push((e: any) => { return this.isValid() ? null : { 'date': 'Invalid date' } });\r\n        if (this.to.required) {\r\n            validators.push((e: any) => { return !!e.value ? null : { 'required': 'Required field' } });\r\n        }\r\n        this.formControl.setValidators(Validators.compose(validators));\r\n    }\r\n\r\n    isValid() {\r\n        if (this.model) {\r\n            if (this.model.indexOf('_') >= 0) {\r\n                return false;\r\n            }\r\n            else {\r\n                if (moment(this.model, this.format).isValid()) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false\r\n        }\r\n        return true;\r\n    }\r\n\r\n    today() {\r\n        this.model = moment().format(this.format);\r\n        this.formControl.setValue(moment(this.model, this.format).toDate());\r\n    }\r\n\r\n    onChange(e: any) {\r\n        if (e) {\r\n            this.formControl.setValue(moment(e, this.format).toDate());\r\n        }\r\n        else {\r\n            this.formControl.setValue(null);\r\n        }\r\n        this.errors = \"\";\r\n        if (this.formControl.errors) {\r\n            for (var key in this.formControl.errors) {\r\n                if (this.formControl.errors.hasOwnProperty(key)) {\r\n                    this.errors += this.formControl.errors[key] + '. ';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'formly-datemask',\r\n    styles: [`\r\n    .ng2-datetime-picker {\r\n        width: 100% !important;\r\n    }\r\n\r\n    i {\r\n        display: inline-block;\r\n    }\r\n\r\n    .datetime-picker .hourLabel, .datetime-picker .minutesLabel {\r\n        display: block !important;\r\n    }\r\n\r\n    p-inputMask {\r\n        padding: 0;\r\n    }\r\n\r\n    :host /deep/ .ui-inputtext {\r\n        width: 100%;\r\n        border: none !important;\r\n    }\r\n\r\n    .today {\r\n        position: absolute;\r\n        bottom: 10px;\r\n        right: 10px;\r\n        cursor: pointer;\r\n    }\r\n    `],\r\n    template: `\r\n    <div class=\"form-group\">\r\n        <label for=\"key\" [ngStyle]=\"{color:formControl.errors?'#F00':''}\">{{ to.label }}</label>\r\n        <div style=\"position: relative\">\r\n        <input class=\"form-control\" placeholder=\"{{this.format}}\" type=\"text\" [(ngModel)]=\"model\" [textMask]=\"{mask: mask, keepCharPositions: true, pipe: autoCorrectedDatePipe }\"\r\n            (ngModelChange)=\"onChange($event)\" />\r\n            <i class=\"fa fa-calendar-check-o today\" title=\"Fecha de Hoy\" (click)=\"today()\"></i>\r\n        </div>\r\n    </div>\r\n    `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}